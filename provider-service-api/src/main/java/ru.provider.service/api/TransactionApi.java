/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.provider.service.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import ru.provider.service.model.PageTransactionResponse;
import ru.provider.service.model.TransactionFilterRequest;
import ru.provider.service.model.TransactionRequest;
import ru.provider.service.model.TransactionResponse;
import ru.provider.service.model.TransactionShortResponse;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.UUID;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Transaction", description = "the Transaction API")
public interface TransactionApi {

    /**
     * POST /api/v1/transaction : Create Transaction
     *
     * @param transactionRequest  (optional)
     * @return CREATED (status code 201)
     */
    @Operation(
        operationId = "addTransaction",
        summary = "Create Transaction",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "201", description = "CREATED", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionShortResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TransactionShortResponse> addTransaction(
        @Parameter(name = "TransactionRequest", description = "") @Valid @RequestBody(required = false) TransactionRequest transactionRequest
    );


    /**
     * GET /api/v1/transaction
     *
     * @param filter  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findAllTransaction",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageTransactionResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/transaction",
        produces = { "application/json" }
    )
    ResponseEntity<PageTransactionResponse> findAllTransaction(
        @Parameter(name = "filter", description = "") @Valid TransactionFilterRequest filter
    );


    /**
     * GET /api/v1/transaction/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findTransactionById",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionShortResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/transaction/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<TransactionShortResponse> findTransactionById(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/transaction/{id}/admin
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findTransactionByIdForAdmin",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/transaction/{id}/admin",
        produces = { "application/json" }
    )
    ResponseEntity<TransactionResponse> findTransactionByIdForAdmin(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") UUID id
    );

}
