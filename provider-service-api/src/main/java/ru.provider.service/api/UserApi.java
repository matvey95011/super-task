/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.provider.service.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import ru.provider.service.model.FilterRequest;
import ru.provider.service.model.PageUserResponse;
import ru.provider.service.model.UserRequest;
import ru.provider.service.model.UserResponse;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.UUID;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /api/v1/user : Create or Update User
     *
     * @param userRequest  (optional)
     * @return CREATED (status code 201)
     */
    @Operation(
        operationId = "addUser",
        summary = "Create or Update User",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "CREATED", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponse> addUser(
        @Parameter(name = "UserRequest", description = "") @Valid @RequestBody(required = false) UserRequest userRequest
    );


    /**
     * DELETE /api/v1/user/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/user/{id}"
    )
    ResponseEntity<Void> deleteUser(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/user
     *
     * @param filter  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findAllUser",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageUserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/user",
        produces = { "application/json" }
    )
    ResponseEntity<PageUserResponse> findAllUser(
        @Parameter(name = "filter", description = "") @Valid FilterRequest filter
    );


    /**
     * GET /api/v1/user/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findUserById",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/user/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<UserResponse> findUserById(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") UUID id
    );

}
